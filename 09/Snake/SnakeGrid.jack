
class SnakeGrid{

//setting the field the snake is set to play
	field SnakeGame game;

//size of the grid
	field int sizeX;
	field int sizeY;

//XY position of the apples
	field int foodX;
	field int foodY;

//a 2-D array where the snake is
	field Array grid;

//setting new grid
	constructor SnakeGrid new(SnakeGame Agame, int Ax, int Ay){

	let game = Agame;
	let sizeX = Ax / 4;
	let sizeY = (Ay-16) / 4;

	//set grid
	do initGrid();

	return this;

	   }

//erasing a grid
	method void dispose(){

	var int curX;
	var Array xGrid;

	let curX = 0;

	while(curX < sizeX){
		let xGrid = grid[curX];
		do xGrid.dispose();
		let curX = curX + 1;
					   }
	do Memory.deAlloc(this);

	return;
						 }


//drawing the apple in the grid

method void placeFood(){
	
	var boolean found;
	var int randX;
	var int randY;

	let found = false;
	while(~found){
	let randX = Random.randRange(sizeX);
	let randY = Random.randRange(sizeY);
	if(~ checkOccupied(randX, randY)){
		let found = true;
									 }
				 }

	let foodX = randX;
	let foodY = randY;

	return;

					   }

method void drawFood(){
	do Screen.setColor(true);
	do Screen.drawCircle((foodX*4)+2, (food*4)+2, 2);

	return;
						}



// setting original grid
    method void initGrid(){

        var int curX, curY;
        var Array xGrid;

        let grid = Array.new(sizeX);
        let curX = 0;

        while( curX < sizeX ){
        let xGrid = Array.new(sizeY);
        let curY = 0;

        while( curY < sizeY ){
        let xGrid[curY] = false;
        let curY = curY + 1;
            				  }
        let grid[curX] = xGrid;
        let curX = curX + 1;
        					}

        return;

    }


 //setting info to grid
    method int sizeX(){
        return sizeX;
    				   }

    
    method int sizeY(){
        return sizeY;
                       }
   
    
    method int foodX(){
        return foodX;
                       }
   
   
    method int foodY(){
        return foodY;
                       }



// conditions for grid
method void setOccupied(int x, int y, boolean occupied){
        var Array xGrid;
        let xGrid = grid[x];
        let xGrid[y] = occupied;
        return;
   													   }


method boolean checkOccupied(int x, int y){
        var Array xGrid;
        let xGrid = grid[x];
        if( xGrid[y] ){
            return true;
        			  }
        else{
            return false;
            }
                                          }


 method boolean checkFood(int x, int y){

        if( x = foodX ){
       		 if( y = foodY ){
                return true;
                            }
        			    }

        return false;
                                        }




}

