
//Drawing Snake

class Snake {
	
	//setting snake in grid
		field SnakeGame game;

	//setting snake's head to X&Y position 
		field int posX;
		field int posY;

	//setting length of the snake 
		field int length;

	//setting snake's growth when eating apples
		field int growing;

	//setting # left for snake's growth
		field int leftgrow;

	//setting snake's direction moving

		field int dir;
		field int lastdir;

	//setting snake's history movements

		field Array histX;
		field Array histY;
		field int histSize;

	
	//building a new snake

	constructor Snake new(SnakeGame Agame, int Ax, int Ay, int Alen, int Agrowing){

	var int i;

	let game = Agame;
	let posX = Ax - Alen;
	let posY = Ay;
	let length = Alen;
	let growing = Agrowing;

	let leftgrow = 0;
	let dir = 4;
	let lastdir = 4;
	let histSize = 512;
	let histX = Array.new(histSize);
	let histY = Array.new(histSize);

	// drawing orginal snake
	let i = 0;
	while (i<length) {
	let posX = posX + 1;
	do drawHead(game.getCycle());
	let i = i + 1;
	do game.nextCycle();
					 }
	return this;
	}


	//erasing snake
	method void dispose() {

	do histX.dispose();
	do histY.dispose();
	do Memory.deAlloc(this);
	return;
						  }

//if need to be built again

if (game.getCycle() = histSize) {
	
	if(game.getCycle() = histSize) {
	do rewriteHistory();
	return true;
	                               }

                                }
//building snake cycle
method void rewriteHistory() {
	
	var int i, src, dst;

	let i = length;
	let dst = 0;
	let src = histSize - length;
	while(i>0) {
	let histX[dst] = histX[src];
	let histY[dst] = histY[src];
	let src = src + 1;
	let dst = dst + 1;
	let i = i - 1;
			   }
	return;
							}


//snake's head position
method int posX() {
	return posX;
				  }

method int posY(){
	return posY;
                 }

//collectig snake's length
method int getLength(){
	return length;
                      }

//collecting snake's direction
method int getDir(){
	return dir;
                   }

method int getLastDir(){
	return lastdir;	
                       }

//setting snake's direction
method void setDir(int newdir){
	let dir = newdir;
	return;
                              }

method void rememberDir(){
	let lastdir = dir;
	return;
}


//condition to have snake to move
method boolean tryMove(){
	
	var SnakeGrid grid;
	let grid = game.getGrid();

//upward
	if(dir = 1){
	if (posY = 0){

		return false;
				 }
	else{
		let posY = posY - 1;
	    }			 
			    }

//downward
	if(dir = 2){
	if(posY = grid.sizeY()){
		return false;
						   }
	else{
		let posX = posX + 1;
		}
			   }

//left
	if(dir = 3){
	if(posX = 0){
		return false;
				}
	else{
		let posX = posX - 1;
		}
				}

//right
	if(dir = 4){
	if(posX = grid.sizeX()){
		return false;
						   }
	else{
		let posX = posX + 1;
	    }
			   }



//condition if the snake hits itself
	if(grid.checkOccupied(posX, posY)){
		return false;
									  }
                             }




}


